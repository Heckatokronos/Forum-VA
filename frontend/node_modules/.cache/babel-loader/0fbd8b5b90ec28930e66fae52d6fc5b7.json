{"ast":null,"code":"/**\n * This file contains a utility to generate hashes to be used as generated class names\n */\n\n/* eslint-disable no-bitwise, default-case, no-param-reassign, prefer-destructuring */\n\n/**\n * murmurhash2 via https://gist.github.com/raycmorgan/588423\n */\nfunction doHash(str) {\n  let seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const m = 0x5bd1e995;\n  const r = 24;\n  let h = seed ^ str.length;\n  let length = str.length;\n  let currentIndex = 0;\n\n  while (length >= 4) {\n    let k = UInt32(str, currentIndex);\n    k = Umul32(k, m);\n    k ^= k >>> r;\n    k = Umul32(k, m);\n    h = Umul32(h, m);\n    h ^= k;\n    currentIndex += 4;\n    length -= 4;\n  }\n\n  switch (length) {\n    case 3:\n      h ^= UInt16(str, currentIndex);\n      h ^= str.charCodeAt(currentIndex + 2) << 16;\n      h = Umul32(h, m);\n      break;\n\n    case 2:\n      h ^= UInt16(str, currentIndex);\n      h = Umul32(h, m);\n      break;\n\n    case 1:\n      h ^= str.charCodeAt(currentIndex);\n      h = Umul32(h, m);\n      break;\n  }\n\n  h ^= h >>> 13;\n  h = Umul32(h, m);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nfunction UInt32(str, pos) {\n  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);\n}\n\nfunction UInt16(str, pos) {\n  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);\n}\n\nfunction Umul32(n, m) {\n  n |= 0;\n  m |= 0;\n  const nlo = n & 0xffff;\n  const nhi = n >>> 16;\n  const res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;\n  return res;\n}\n\nfunction slugify(code) {\n  return doHash(code).toString(36);\n}\n\nexport default slugify;","map":{"version":3,"mappings":"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","names":["doHash","str","seed","m","r","h","length","currentIndex","k","UInt32","Umul32","UInt16","charCodeAt","pos","n","nlo","nhi","res","slugify","code","toString"],"sources":["D:\\Projects\\GitHub\\frontend\\dev\\node_modules\\@linaria\\utils\\src\\slugify.ts"],"sourcesContent":["/**\n * This file contains a utility to generate hashes to be used as generated class names\n */\n\n/* eslint-disable no-bitwise, default-case, no-param-reassign, prefer-destructuring */\n\n/**\n * murmurhash2 via https://gist.github.com/raycmorgan/588423\n */\n\nfunction doHash(str: string, seed: number = 0) {\n  const m = 0x5bd1e995;\n  const r = 24;\n  let h = seed ^ str.length;\n  let length = str.length;\n  let currentIndex = 0;\n\n  while (length >= 4) {\n    let k = UInt32(str, currentIndex);\n\n    k = Umul32(k, m);\n    k ^= k >>> r;\n    k = Umul32(k, m);\n\n    h = Umul32(h, m);\n    h ^= k;\n\n    currentIndex += 4;\n    length -= 4;\n  }\n\n  switch (length) {\n    case 3:\n      h ^= UInt16(str, currentIndex);\n      h ^= str.charCodeAt(currentIndex + 2) << 16;\n      h = Umul32(h, m);\n      break;\n\n    case 2:\n      h ^= UInt16(str, currentIndex);\n      h = Umul32(h, m);\n      break;\n\n    case 1:\n      h ^= str.charCodeAt(currentIndex);\n      h = Umul32(h, m);\n      break;\n  }\n\n  h ^= h >>> 13;\n  h = Umul32(h, m);\n  h ^= h >>> 15;\n\n  return h >>> 0;\n}\n\nfunction UInt32(str: string, pos: number) {\n  return (\n    str.charCodeAt(pos++) +\n    (str.charCodeAt(pos++) << 8) +\n    (str.charCodeAt(pos++) << 16) +\n    (str.charCodeAt(pos) << 24)\n  );\n}\n\nfunction UInt16(str: string, pos: number) {\n  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);\n}\n\nfunction Umul32(n: number, m: number) {\n  n |= 0;\n  m |= 0;\n  const nlo = n & 0xffff;\n  const nhi = n >>> 16;\n  const res = (nlo * m + (((nhi * m) & 0xffff) << 16)) | 0;\n  return res;\n}\n\nfunction slugify(code: string) {\n  return doHash(code).toString(36);\n}\n\nexport default slugify;\n"]},"metadata":{},"sourceType":"module"}